import registrationPage from "../pages/registrationPage"
import anyPage from "../pages/anyPage"

describe('Registration page tests', () => {
    beforeEach(() => {
        cy.clearCookies()
        cy.visit('https://www.unibet.co.uk/registration')
        anyPage.cookies_dialog.allowAllCookiesButton().click();
    })
    it('should check page title is Join the club', () => {
        cy.title().should('equal', "Join the club")
        })

    it('should be at least one promotion', () => {
        registrationPage.promotion.promotions().first().should('be.visible')
    })

    it('should check registration elements are loaded', () => {
        registrationPage.promotion.skipButton().click()
        registrationPage.elements.registrationForm().should('be.visible')
        registrationPage.elements.stepOneBubble().should('have.css', 'background', 'rgb(0, 83, 29) none repeat scroll 0% 0% / auto padding-box border-box')
        registrationPage.elements.stepTwoBubble().should('have.css', 'background', 'rgb(204, 204, 204) none repeat scroll 0% 0% / auto padding-box border-box')
        registrationPage.elements.firstNameInput().should('be.visible')
        registrationPage.elements.lastNameInput().should('be.visible')
        registrationPage.elements.emailInput().should('be.visible')
        registrationPage.elements.passwordInput().should('be.visible')
        registrationPage.elements.dateSelect().should('be.visible')
        registrationPage.elements.monthSelect().should('be.visible')
        registrationPage.elements.yearSelect().should('be.visible')
        registrationPage.elements.genderSelect().should('be.visible')
        registrationPage.elements.continueButton().should('be.visible')
    })

    it('should check continue button is disabled until form is filled and enabled after filling', () => {
        registrationPage.promotion.skipButton().click()
        registrationPage.elements.continueButton()
            .should('have.css', 'opacity', '0.5')
            .should('have.css', 'background-color', 'rgb(255, 231, 31)')
            .should('have.css', 'border', '2px solid rgb(255, 231, 31)')
        registrationPage.elements.firstNameInput().type('Test')
        registrationPage.elements.lastNameInput().type('Auto')
        registrationPage.elements.emailInput().type('test@test.test')
        registrationPage.elements.passwordInput().type('testTest1221', {log:false})
        registrationPage.elements.dateSelect().select('01')
        registrationPage.elements.monthSelect().select('01')
        registrationPage.elements.yearSelect().select('2000')
        registrationPage.elements.genderSelect().select('1')
        registrationPage.elements.continueButton()
            .should('have.css', 'background', 'rgb(255, 231, 31) none repeat scroll 0% 0% / auto padding-box border-box')
            .should('have.css', 'border', '2px solid rgb(255, 231, 31)')
            .should('have.css', 'opacity', '1')
    })
    it('should check continue button is enabled after filling form', () => {
        registrationPage.promotion.skipButton().click()
        registrationPage.elements.firstNameInput().type('Test')
        registrationPage.elements.lastNameInput().type('Auto')
        registrationPage.elements.emailInput().type('test@test.test')
        registrationPage.elements.passwordInput().type('qwerty1221', {log: false})
        registrationPage.elements.dateSelect().select('01')
        registrationPage.elements.monthSelect().select('01')
        registrationPage.elements.yearSelect().select('2000')
        registrationPage.elements.genderSelect().select('1')
        registrationPage.elements.continueButton().should('have.css', 'background', 'rgb(255, 231, 31) none repeat scroll 0% 0% / auto padding-box border-box')
        registrationPage.elements.continueButton().should('have.css', 'border', '2px solid rgb(255, 231, 31)')
        registrationPage.elements.continueButton().click()
        registrationPage.fewMoreDetails.postCodeInput().should('be.visible')
        registrationPage.fewMoreDetails.joinButton()
            .should('have.css', 'background-color', 'rgb(255, 231, 31)')
            .should('have.css', 'border', '2px solid rgb(255, 231, 31)')
        registrationPage.elements.stepOneBubble().should('have.css', 'background', 'rgb(0, 83, 29) none repeat scroll 0% 0% / auto padding-box border-box')
        registrationPage.elements.stepTwoBubble().should('have.css', 'background', 'rgb(0, 83, 29) none repeat scroll 0% 0% / auto padding-box border-box')

        registrationPage.fewMoreDetails.enterManuallyLink().click()
        registrationPage.fewMoreDetails.addressInput().type('M D, Unit 85, 3 Balloo Link')
        registrationPage.fewMoreDetails.zipCodeInput().type('SW1W 0NY')
        registrationPage.fewMoreDetails.cityInput().type('London')
        registrationPage.fewMoreDetails.mobileInput().type('12324')
        registrationPage.fewMoreDetails.termsAndCoditionsCheckbox().check({force: true})
        registrationPage.elements.continueButton()
            .should('have.css', 'background', 'rgb(255, 231, 31) none repeat scroll 0% 0% / auto padding-box border-box')
            .should('have.css', 'border', '2px solid rgb(255, 231, 31)')
            .should('have.css', 'opacity', '1')

    })
    it('I want this Offer button is available and in correct colour', () => {
        registrationPage.promotion.iWantThisOfferButton()
            .should('be.visible')
            .should('be.enabled')
            .should('have.css', 'background', 'rgb(255, 231, 31) none repeat scroll 0% 0% / auto padding-box border-box')
            .should('have.css', 'border', '2px solid rgb(255, 231, 31)')
            .should('have.css', 'opacity', '1')
    })

    it('should check continue button is disabled until form is filled and enabled after filling', () => {
        registrationPage.promotion.skipButton().click()
        registrationPage.elements.continueButton()
            .should('have.css', 'opacity', '0.5')
            .should('have.css', 'background-color', 'rgb(255, 231, 31)')
            .should('have.css', 'border', '2px solid rgb(255, 231, 31)')
        registrationPage.elements.firstNameInput().type('Test')
        registrationPage.elements.lastNameInput().type('Auto')
        registrationPage.elements.passwordInput().type('testTest1221', {log:false})
        registrationPage.elements.dateSelect().select('01')
        registrationPage.elements.monthSelect().select('01')
        registrationPage.elements.yearSelect().select('2000')
        registrationPage.elements.genderSelect().select('1')

        validateEmailField('firstname.lastname@example.com','not.exist')
        validateEmailField('email@subdomain.example.com','not.exist')
        validateEmailField('email@123.123.123.123','not.exist')
        validateEmailField('email@[123.123.123.123]','not.exist')
        validateEmailField('"email"@example.com','not.exist')
        validateEmailField('1234567890@example.com','not.exist')
        validateEmailField('email@example-one.com','not.exist')
        validateEmailField('_______@example.com','not.exist')
        validateEmailField('email@example.name','not.exist')
        validateEmailField('firstname-lastname@example.com','not.exist')
        validateEmailField('very.”(),:;<>[]”.VERY.”very@\\ "very”.unusual@strange.example.com','not.exist')

        validateEmailField('plainaddress','be.visible')
        validateEmailField('#@%^%#$@#$@#.com','be.visible')
        validateEmailField('@example.com','be.visible')
        validateEmailField('Joe Smith <email@example.com>','be.visible')
        validateEmailField('email.example.com','be.visible')
        validateEmailField('email@example@example.com','be.visible')
        validateEmailField('email@example.com (Joe Smith)','be.visible')
        validateEmailField('email@example','be.visible')
        validateEmailField('email@111.222.333.44444','be.visible')
        validateEmailField('email@example..com','be.visible')
    })
})
function validateEmailField(email, validator){
    registrationPage.elements.emailInput().type(email)
    registrationPage.elements.emailValidationMessage().should(validator)
    registrationPage.elements.emailInput().clear()

}
